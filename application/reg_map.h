#ifndef _MICROMINI_REG_MAP_H
#define _MICROMINI_REG_MAP_H
/* Autogenerated by gen/gen_map.py, do not edit*/

enum e_micro_mini_reg {
	MICROMINI_ID                               = 0x00, /*[R ] returns 0xab*/
	MICROMINI_MEASURE                          = 0x10, /*[ W] queue a new measurement*/
	MICROMINI_MEASUREMENT_AGE                  = 0x11, /*[R ] age of last measurement in seconds ( saturating at 255)*/
	MICROMINI_NMEASUREMENTS                    = 0x12, /*[R ] number of measurements taken (wrapping)*/
	MICROMINI_PV_LSB                           = 0x20, /*[R ] LSB of PV measurement*/
	MICROMINI_PV_MSB                           = 0x21, /*[R ] MSB of PV measurement*/
	MICROMINI_TURBINE_LSB                      = 0x22, /*[R ] LSB of Turbine measurement*/
	MICROMINI_TURBINE_MSB                      = 0x23, /*[R ] MSB of Turbine measurement*/
	MICROMINI_DELTA_PV_LSB                     = 0x24, /*[R ] LSB of PV measurement*/
	MICROMINI_DELTA_PV_MSB                     = 0x25, /*[R ] MSB of PV measurement*/
	MICROMINI_DELTA_TURBINE_LSB                = 0x26, /*[R ] LSB of Turbine measurement*/
	MICROMINI_DELTA_TURBINE_MSB                = 0x27, /*[R ] MSB of Turbine measurement*/
	MICROMINI_WHEN_BYTE_0                      = 0x40, /*[R ] LSB byte of uptime at time of measurement*/
	MICROMINI_WHEN_BYTE_1                      = 0x41, /*[R ] next to LSB byte of uptime at time of measurement*/
	MICROMINI_WHEN_BYTE_2                      = 0x42, /*[R ] next to next to  LSB byte of uptime at time of measurement*/
	MICROMINI_WHEN_BYTE_3                      = 0x43, /*[R ] MSB byte of uptime at time of measurement*/
	MICROMINI_T_LOCAL_MSB                      = 0x50, /*[R ] MSB of local temperature sensor*/
	MICROMINI_T_LOCAL_LSB                      = 0x51, /*[R ] LSB of local temperature sensor*/
	MICROMINI_T1_MSB                           = 0x52, /*[R ] MSB of T1 sensor*/
	MICROMINI_T1_LSB                           = 0x53, /*[R ] LSB of T1 sensor*/
	MICROMINI_T2_MSB                           = 0x54, /*[R ] MSB of T2 sensor*/
	MICROMINI_T2_LSB                           = 0x55, /*[R ] LSB of T2 sensor*/
	MICROMINI_BAT_MON_LSB                      = 0x60, /*[R ] LSB of battery monitor ADC*/
	MICROMINI_BAT_MON_MSB                      = 0x61, /*[R ] MSB of battery monitor ADC*/
	MICROMINI_AIN1_MON_LSB                     = 0x62, /*[R ] LSB of AIN1 ADC*/
	MICROMINI_AIN1_MON_MSB                     = 0x63, /*[R ] MSB of AIN1 ADC*/
	MICROMINI_AIN12_MON_LSB                    = 0x64, /*[R ] LSB of AIN12 ADC*/
	MICROMINI_AIN12_MON_MSB                    = 0x65, /*[R ] MSB of AIN12 ADC*/
	MICROMINI_AIN13_MON_LSB                    = 0x66, /*[R ] LSB of AIN13 ADC*/
	MICROMINI_AIN13_MON_MSB                    = 0x67, /*[R ] MSB of AIN13 ADC*/
	MICROMINI_WRITE_GPIOS                      = 0x90, /*[RW] "Write GPIOS  (bit0 = AUX_EN). First send mask*/
	MICROMINI_READ_GPIOS                       = 0xa0, /*[R ] READ GPIOS  (bit0 = ALERT)*/
};

/* X macros for registers */

#define MICROMINI_W1_READ_REGISTERS \
X(0x0, ID) \
X(0x11, MEASUREMENT_AGE) \
X(0x12, NMEASUREMENTS) \
X(0x20, PV_LSB) \
X(0x21, PV_MSB) \
X(0x22, TURBINE_LSB) \
X(0x23, TURBINE_MSB) \
X(0x24, DELTA_PV_LSB) \
X(0x25, DELTA_PV_MSB) \
X(0x26, DELTA_TURBINE_LSB) \
X(0x27, DELTA_TURBINE_MSB) \
X(0x40, WHEN_BYTE_0) \
X(0x41, WHEN_BYTE_1) \
X(0x42, WHEN_BYTE_2) \
X(0x43, WHEN_BYTE_3) \
X(0x50, T_LOCAL_MSB) \
X(0x51, T_LOCAL_LSB) \
X(0x52, T1_MSB) \
X(0x53, T1_LSB) \
X(0x54, T2_MSB) \
X(0x55, T2_LSB) \
X(0x60, BAT_MON_LSB) \
X(0x61, BAT_MON_MSB) \
X(0x62, AIN1_MON_LSB) \
X(0x63, AIN1_MON_MSB) \
X(0x64, AIN12_MON_LSB) \
X(0x65, AIN12_MON_MSB) \
X(0x66, AIN13_MON_LSB) \
X(0x67, AIN13_MON_MSB) \
X(0x90, WRITE_GPIOS) \
X(0xa0, READ_GPIOS) \


#define MICROMINI_W1_WRITE_REGISTERS \
X(0x10, MEASURE) \
X(0x90, WRITE_GPIOS) \


#endif
