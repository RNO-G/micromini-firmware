#ifndef _MICROMINI_REG_MAP_H
#define _MICROMINI_REG_MAP_H
/* Autogenerated by gen/gen_map.py, do not edit*/

enum e_micro_mini_reg {
	MICROMINI_ID                               = 0x00, /*[R ] returns 0xab*/
	MICROMINI_MAJ_VER                          = 0x01, /*[R ] major version (or 0xd0 if not implemented)*/
	MICROMINI_MIN_VER                          = 0x02, /*[R ] minor version (or 0xd0 if not implemented)*/
	MICROMINI_REV_VER                          = 0x03, /*[R ] rev version (or 0xd0 if not implemented)*/
	MICROMINI_MEASURE                          = 0x10, /*[ W] queue a new measurement*/
	MICROMINI_MEASUREMENT_AGE                  = 0x11, /*[R ] age of last measurement in seconds ( saturating at 255)*/
	MICROMINI_NMEASUREMENTS                    = 0x12, /*[R ] number of measurements taken (wrapping)*/
	MICROMINI_PV_LSB                           = 0x20, /*[R ] LSB of PV measurement*/
	MICROMINI_PV_MSB                           = 0x21, /*[R ] MSB of PV measurement*/
	MICROMINI_TURBINE_LSB                      = 0x22, /*[R ] LSB of Turbine measurement*/
	MICROMINI_TURBINE_MSB                      = 0x23, /*[R ] MSB of Turbine measurement*/
	MICROMINI_DELTA_PV_LSB                     = 0x24, /*[R ] LSB of PV measurement*/
	MICROMINI_DELTA_PV_MSB                     = 0x25, /*[R ] MSB of PV measurement*/
	MICROMINI_DELTA_TURBINE_LSB                = 0x26, /*[R ] LSB of Turbine measurement*/
	MICROMINI_DELTA_TURBINE_MSB                = 0x27, /*[R ] MSB of Turbine measurement*/
	MICROMINI_WHEN_BYTE_0                      = 0x40, /*[R ] LSB byte of uptime at time of measurement*/
	MICROMINI_WHEN_BYTE_1                      = 0x41, /*[R ] next to LSB byte of uptime at time of measurement*/
	MICROMINI_WHEN_BYTE_2                      = 0x42, /*[R ] next to next to  LSB byte of uptime at time of measurement*/
	MICROMINI_WHEN_BYTE_3                      = 0x43, /*[R ] MSB byte of uptime at time of measurement*/
	MICROMINI_T_LOCAL_MSB                      = 0x50, /*[R ] MSB of local temperature sensor*/
	MICROMINI_T_LOCAL_LSB                      = 0x51, /*[R ] LSB of local temperature sensor*/
	MICROMINI_T1_MSB                           = 0x52, /*[R ] MSB of T1 sensor*/
	MICROMINI_T1_LSB                           = 0x53, /*[R ] LSB of T1 sensor*/
	MICROMINI_T2_MSB                           = 0x54, /*[R ] MSB of T2 sensor*/
	MICROMINI_T2_LSB                           = 0x55, /*[R ] LSB of T2 sensor*/
	MICROMINI_T_LOCAL_MSB_RAW                  = 0x5a, /*[R ] RAW_MSB of T_LOCAL sensor*/
	MICROMINI_T1_MSB_RAW                       = 0x5b, /*[R ] RAW_MSB of T1 sensor*/
	MICROMINI_T2_MSB_RAW                       = 0x5c, /*[R ] RAW_MSB of T2 sensor*/
	MICROMINI_AIN                              = 0x60, /*[R ] Read adc value at AIN_OFFSET.*/
	MICROMINI_AIN_READY                        = 0x61, /*[R ] Is AIN ready? 0 no, 1 yes*/
	MICROMINI_AIN_OFFSET                       = 0x62, /*[RW] set byte OFFSET to read*/
	MICROMINI_AIN_NREAD                        = 0x63, /*[RW] number of samples to send on AIN*/
	MICROMINI_AIN_SOURCE                       = 0x64, /*[RW] source of AIN (0-3), 0 = AIN1, 1 = AIN12, 2 = AIN13, 3= BAT_MON*/
	MICROMINI_AIN_RATE                         = 0x65, /*[RW] ain rate configuration; bits 0-2: clock prescaler, bits 3-7 SAMPLEN*/
	MICROMINI_AIN_GAIN                         = 0x66, /*[RW] ain gain configuration; bits 0-3: gain;  bits 4-7: ref*/
	MICROMINI_AIN_NMEAS                        = 0x67, /*[RW] number of samples to measure on conversion, divided by 8 minus 1 (i.e. 0 = 8, 31=256, 63 = 512, 255 = 2048)*/
	MICROMINI_AIN_HIST                         = 0x70, /*[R ] Read ADC histogram value at AIN_HIST_BIN (saturates at 255, use LSB/MSB to get more*/
	MICROMINI_AIN_HIST_MSB                     = 0x71, /*[R ] Read ADC histogram MSB value at AIN_HIST_BIN*/
	MICROMINI_AIN_HIST_LSB                     = 0x72, /*[R ] Read ADC histogram LSB value at AIN_HIST_BIN*/
	MICROMINI_AIN_HIST_BIN                     = 0x73, /*[RW] histogram bin to read*/
	MICROMINI_AIN_HIST_MODE_BIN                = 0x74, /*[R ] mode bin of hist*/
	MICROMINI_AIN_HIST_HIGHEST_VAL             = 0x75, /*[R ] maximum populated bin of hist*/
	MICROMINI_AIN_HIST_LOWEST_VAL              = 0x76, /*[R ] maximum populated bin of hist*/
	MICROMINI_AIN_NUM_RISING_CROSSINGS         = 0x80, /*[R ] number of rising threshold crossings, recalculated on threshold change*/
	MICROMINI_AIN_NUM_FALLING_CROSSINGS        = 0x81, /*[R ] number of falling threshold crossings, recalculated on threshold change*/
	MICROMINI_AIN_RISING_THRESH                = 0x82, /*[RW] threshold for rising threshold crossings*/
	MICROMINI_AIN_FALLING_THRESH               = 0x83, /*[RW] threshold for falling threshold crossings*/
	MICROMINI_WRITE_GPIOS                      = 0x90, /*[RW] Write GPIOS  (bit0 = AUX_EN). First send mask, then send values. Or ask for a read for a readback.*/
	MICROMINI_READ_GPIOS                       = 0xa0, /*[R ] read gpios  (bit0 = ALERT)*/
	MICROMINI_RESET_REASON                     = 0xf3, /*[R ] reset reason for the MCU*/
	MICROMINI_RESET                            = 0xf4, /*[ W] reset the MCU*/
};

/* X macros for registers */

#define MICROMINI_W1_READ_REGISTERS \
X(0x0, ID) \
X(0x1, MAJ_VER) \
X(0x2, MIN_VER) \
X(0x3, REV_VER) \
X(0x11, MEASUREMENT_AGE) \
X(0x12, NMEASUREMENTS) \
X(0x20, PV_LSB) \
X(0x21, PV_MSB) \
X(0x22, TURBINE_LSB) \
X(0x23, TURBINE_MSB) \
X(0x24, DELTA_PV_LSB) \
X(0x25, DELTA_PV_MSB) \
X(0x26, DELTA_TURBINE_LSB) \
X(0x27, DELTA_TURBINE_MSB) \
X(0x40, WHEN_BYTE_0) \
X(0x41, WHEN_BYTE_1) \
X(0x42, WHEN_BYTE_2) \
X(0x43, WHEN_BYTE_3) \
X(0x50, T_LOCAL_MSB) \
X(0x51, T_LOCAL_LSB) \
X(0x52, T1_MSB) \
X(0x53, T1_LSB) \
X(0x54, T2_MSB) \
X(0x55, T2_LSB) \
X(0x5a, T_LOCAL_MSB_RAW) \
X(0x5b, T1_MSB_RAW) \
X(0x5c, T2_MSB_RAW) \
X(0x60, AIN) \
X(0x61, AIN_READY) \
X(0x62, AIN_OFFSET) \
X(0x63, AIN_NREAD) \
X(0x64, AIN_SOURCE) \
X(0x65, AIN_RATE) \
X(0x66, AIN_GAIN) \
X(0x67, AIN_NMEAS) \
X(0x70, AIN_HIST) \
X(0x71, AIN_HIST_MSB) \
X(0x72, AIN_HIST_LSB) \
X(0x73, AIN_HIST_BIN) \
X(0x74, AIN_HIST_MODE_BIN) \
X(0x75, AIN_HIST_HIGHEST_VAL) \
X(0x76, AIN_HIST_LOWEST_VAL) \
X(0x80, AIN_NUM_RISING_CROSSINGS) \
X(0x81, AIN_NUM_FALLING_CROSSINGS) \
X(0x82, AIN_RISING_THRESH) \
X(0x83, AIN_FALLING_THRESH) \
X(0x90, WRITE_GPIOS) \
X(0xa0, READ_GPIOS) \
X(0xf3, RESET_REASON) \


#define MICROMINI_W1_WRITE_REGISTERS \
X(0x10, MEASURE) \
X(0x62, AIN_OFFSET) \
X(0x63, AIN_NREAD) \
X(0x64, AIN_SOURCE) \
X(0x65, AIN_RATE) \
X(0x66, AIN_GAIN) \
X(0x67, AIN_NMEAS) \
X(0x73, AIN_HIST_BIN) \
X(0x82, AIN_RISING_THRESH) \
X(0x83, AIN_FALLING_THRESH) \
X(0x90, WRITE_GPIOS) \
X(0xf4, RESET) \


#endif
